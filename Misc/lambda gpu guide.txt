
# Connect to lambda. your prompt should say '[username]@lambda:~$'.
# whenever input is required, press "Enter", "yes", "Y", etc.

# install miniconda:
cd ~
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 
sh Miniconda3-latest-Linux-x86_64.sh

# create a link to the conda binary
ln miniconda3/bin/conda .local/bin/conda

# install cuda:
conda create --name tf23-gpu python=3.8
conda activate tf23-gpu
# If you get a "conda init must be [...] try restarting your terminal" or a similar message while running this line
# you need to restart your terminal. If you're working with bitvise, just close and reopen the terminal window. 
# Otherwise, reconnect to lambda. After that, try running the line again. 
conda install -c anaconda cudatoolkit=10.1
conda install -c anaconda cudnn
conda install pip
conda install numba
pip install tensorflow-gpu==2.3

# Create a file named script.py with the following contents:



# script begin
from numba import cuda
import numpy

@cuda.jit
def my_kernel(io_array):
    # Thread id in a 1D block
    tx = cuda.threadIdx.x
    # Block id in a 1D grid
    bx = cuda.blockIdx.x
    # Block width, i.e. number of threads per block
    bw = cuda.blockDim.x
    # Compute flattened index inside the array
    pos = tx + bx * bw
    if pos < io_array.size:  # Check array boundaries
        io_array[pos] *= 2 # do the computation


# Create the data array - usually initialized some other way
data = numpy.ones(256)

# Set the number of threads in a block
threadsperblock = 32

# Calculate the number of thread blocks in the grid
blockspergrid = (data.size + (threadsperblock - 1)) // threadsperblock

# Now start the kernel
my_kernel[blockspergrid, threadsperblock](data)

# Print the result
print(data)
# script end



# make sure the env is active, your prompt should look like this: (tf23-gpu) [username]@lambda:~$.
# if it doesn't, run:
conda activate tf23-gpu

# make sure that you can run the script using:
srun --gres=gpu:1 -c 2 --pty python3 script.py
# ignore any warnings
